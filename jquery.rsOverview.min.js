
(function ($) {
    var OverviewClass = function ($element, opts, scrollbarPixels) {
        var $divs = $("div", $element), $contentDiv = $divs.eq(0), $viewportDiv = $divs.eq(1), coef = 0, content = { $obj: null, sizeX: 0, sizeY: 0, resized: function () { this.sizeX = this.$obj.width(); this.sizeY = this.$obj.height(); }, resizedOverflow: function () { this.sizeX = this.$obj[0].scrollWidth; this.sizeY = this.$obj[0].scrollHeight; } }, viewport = { $obj: null, sizeX: 0, sizeY: 0, resized: function () { this.sizeX = this.$obj.width(); this.sizeY = this.$obj.height(); } }, getXScrollBarPixels = function () { return content.sizeX <= viewport.sizeX ? 0 : scrollbarPixels; }, getYScrollBarPixels = function () { return content.sizeY <= viewport.sizeY ? 0 : scrollbarPixels; }, onResize = function (event) {
            if (opts.viewport === window) { content.resized(); } else { content.resizedOverflow(); }
            viewport.resized(); if (opts.autoHide) {
                if (content.sizeX <= viewport.sizeX && content.sizeY <= viewport.sizeY) { $element.hide(); return; }
                $element.show();
            }
            var elementSize = { x: $element.width(), y: $element.height() }, coefX = content.sizeX / elementSize.x, coefY = content.sizeY / elementSize.y; coef = Math.max(coefX, coefY); coefX = (viewport.sizeX - getYScrollBarPixels()) / elementSize.x; coefY = (viewport.sizeY - getXScrollBarPixels()) / elementSize.y; coef = Math.max(Math.max(coefX, coefY), coef); var calcWidth = content.sizeX / coef; var calcHeight = content.sizeY / coef; $contentDiv.width(calcWidth).height(calcHeight); if (opts.center) { $contentDiv.css({ 'left': ((elementSize.x - calcWidth) / 2) + 'px', 'top': ((elementSize.y - calcHeight) / 2) + 'px' }); }
            $element.trigger('render.rsOverview');
        }, onRender = function (event) { var calcWidth = (viewport.sizeX - getYScrollBarPixels()) / coef, calcHeight = (viewport.sizeY - getXScrollBarPixels()) / coef; $viewportDiv.width(calcWidth).height(calcHeight).css({ 'left': ((viewport.$obj.scrollLeft() / coef) + (opts.center ? $contentDiv.position().left : 0)) + 'px', 'top': ((viewport.$obj.scrollTop() / coef) + (opts.center ? $contentDiv.position().top : 0)) + 'px' }); }, init = function () {
            viewport.$obj = $(opts.viewport); if (opts.viewport === window) { content.$obj = $(document); } else { content.$obj = viewport.$obj; }
            viewport.$obj.scroll(function () { $element.trigger('render.rsOverview'); }).resize(function () { $element.trigger('resize.rsOverview'); }); $viewportDiv.mousedown(function (e) { var dragInfo = { initPos: $viewportDiv.offset(), initClick: { X: e.pageX, Y: e.pageY} }; this.onselectstart = function () { return false; }; $viewportDiv.bind('mousemove.rsOverview', function (e) { var pos = [$element.position(), $contentDiv.position()]; viewport.$obj.scrollLeft(coef * (e.pageX - dragInfo.initClick.X + dragInfo.initPos.left - pos[0].left - pos[1].left)).scrollTop(coef * (e.pageY - dragInfo.initClick.Y + dragInfo.initPos.top - pos[0].top - pos[1].top)); }); e.preventDefault(); }); $("body").mouseup(function () { $viewportDiv.unbind('mousemove.rsOverview'); }); $contentDiv.mousedown(function (e) {
                var $pos = [$element.position(), $(this).position()]; if (opts.viewport === window) {
                    var scrHtml = [$("html").scrollLeft(), $("html").scrollTop()], scrX, scrY, isSteppingX = true, supportsHtml = (scrHtml[0] != 0 || scrHtml[1] != 0); $("html").animate({ scrX: supportsHtml ? scrHtml[0] : $("body").scrollLeft(), scrY: supportsHtml ? scrHtml[1] : $("body").scrollTop() }, { duration: 0 }); $("html").animate({ scrX: coef * (e.pageX - $pos[0].left - $pos[1].left), scrY: coef * (e.pageY - $pos[0].top - $pos[1].top) }, { duration: opts.scrollSpeed, step: function (now, fx) {
                        if (isSteppingX) { $("html, body").scrollLeft(now); } else { $("html, body").scrollTop(now); }
                        isSteppingX = !isSteppingX;
                    } 
                    });
                } else { viewport.$obj.animate({ scrollLeft: coef * (e.pageX - $pos[0].left - $pos[1].left), scrollTop: coef * (e.pageY - $pos[0].top - $pos[1].top) }, opts.scrollSpeed); }
                e.preventDefault();
            }); $element.bind('resize.rsOverview', onResize).bind('render.rsOverview', onRender); $element.trigger('resize.rsOverview');
        }; init();
    }
    $.fn.rsOverview = function (options) {
        var contentSizeChanged = function () { return this.trigger('resize.rsOverview'); }; if (typeof options == 'string' && options == 'contentSizeChanged')
            return contentSizeChanged.apply(this); var opts = $.extend({}, $.fn.rsOverview.defaults, options), getScrollbarWidth = function () { var $calcDiv = $("<div style='visibily: hidden; overflow: scroll; width: 100px;'></div>"); $("body").append($calcDiv); try { var clientWidth = $calcDiv[0].clientWidth; return 100 - (clientWidth == 100 || clientWidth == 0 ? 83 : clientWidth); } finally { $calcDiv.remove(); } }, scrollbarPixels = opts.viewport === window ? 0 : getScrollbarWidth(); return this.each(function () { new OverviewClass($(this), opts, scrollbarPixels); });
    }; $.fn.rsOverview.defaults = { viewport: window, center: true, autoHide: false, scrollSpeed: 'medium' };
})(jQuery);